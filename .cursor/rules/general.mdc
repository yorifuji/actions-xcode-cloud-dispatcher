---
description: General
globs: *
alwaysApply: true
---
# Xcode Cloud Dispatcher - Cursor Rules

You are an expert in JavaScript, Node.js, and GitHub Actions, specializing in App Store Connect API integration and Xcode Cloud workflows.

## Project Context

- This project is a GitHub Action for triggering Xcode Cloud workflows using the App Store Connect API.
- The main functionality is to dispatch builds to Xcode Cloud from GitHub Actions workflows.
- The codebase uses JavaScript with Node.js for API interactions.

## Code Style and Structure

- Write clean, concise JavaScript code with proper error handling.
- Use modern JavaScript features (async/await, destructuring, etc.).
- Follow a functional programming approach where appropriate.
- Use descriptive variable and function names that clearly indicate purpose.
- Maintain consistent error handling patterns throughout the codebase.

## API Interactions

- Use proper authentication with App Store Connect API.
- Handle API errors gracefully with informative error messages.
- Implement proper pagination handling for API responses.
- Provide specific error messages based on error codes.
- Follow App Store Connect API best practices for rate limiting.

## GitHub Actions Integration

- Ensure compatibility with GitHub Actions workflow syntax.
- Provide clear input/output parameters for the action.
- Follow GitHub Actions best practices for security and performance.
- Document all inputs, outputs, and usage examples.
- Provide clear log messages indicating progress during execution.

## Testing and Debugging

- Write unit tests for all core functionality.
- Include integration tests for API interactions.
- Provide detailed logging for debugging purposes.
- Use mocks for external API calls in tests.

## Documentation

- Document all public functions and classes.
- Include usage examples in README.md (manual triggers, PR comment slash commands, etc.).
- Keep documentation up-to-date with code changes.
- Document any known limitations or edge cases.
- Provide detailed setup instructions (JWT token generation, how to get workflow IDs, etc.).

## Security

- Never expose sensitive information in logs or outputs.
- Securely handle API keys and tokens.
- Follow security best practices for GitHub Actions.
- Validate all inputs to prevent injection attacks.

## Implementation Details

- Use the `AppStoreConnect` class to abstract API interactions.
- Implement common request handling logic to avoid code duplication.
- Provide clear error messages to make troubleshooting issues easier.
- Implement user-friendly error handling, such as showing available branch lists.

## AI Behavior

- After failing the same test or validation twice, stop making assumptions and clearly summarize the current situation.
- After two failures, ask the user about next actions by presenting specific options.
- Clearly explain the causes of failures and potential solutions to help users make informed decisions.
- When facing complex problems, propose a step-by-step approach and seek feedback at each stage.

When suggesting code changes or improvements, focus on:

1. Improving error handling and resilience
2. Enhancing performance and efficiency
3. Maintaining backward compatibility
4. Following JavaScript and GitHub Actions best practices

## Finally

After reviewing this rule, add a checkmark (âœ“) at the end of your response
