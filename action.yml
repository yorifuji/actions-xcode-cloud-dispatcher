name: "Xcode Cloud Dispatcher"
description: "GitHub Actions to run Xcode Cloud workflows using the App Store Connect API"

author: "yorifuji"

branding:
  icon: cloud
  color: blue

inputs:
  appstore-connect-token:
    description: "App Store Connect API token"
    required: true
  xcode-cloud-workflow-id:
    description: "Xcode Cloud workflow ID"
    required: true
  git-branch-name:
    description: "Git branch name"
    required: true

outputs:
  buildNumber:
    description: "The build number"
    value: ${{ steps.xcode-cloud-dispatch.outputs.buildNumber }}
  buildId:
    description: "The build ID"
    value: ${{ steps.xcode-cloud-dispatch.outputs.buildId }}
  gitReferenceId:
    description: "The git reference ID"
    value: ${{ steps.xcode-cloud-dispatch.outputs.gitReferenceId }}

runs:
  using: composite
  steps:
    - uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      id: xcode-cloud-dispatch
      env:
        APPSTORE_CONNECT_TOKEN: ${{ inputs.appstore-connect-token }}
        XCODE_CLOUD_WORKFLOW_ID: ${{ inputs.xcode-cloud-workflow-id }}
        GIT_BRANCH_NAME: ${{ inputs.git-branch-name }}
      with:
        script: |
          const path = require('path');
          const actionPath = process.env.GITHUB_ACTION_PATH;
          const trigger = require(path.join(actionPath, 'index.js'));

          try {
            const result = await trigger({
              "appstore-connect-token": process.env.APPSTORE_CONNECT_TOKEN,
              "xcode-cloud-workflow-id": process.env.XCODE_CLOUD_WORKFLOW_ID,
              "git-branch-name": process.env.GIT_BRANCH_NAME
            });

            core.setOutput('buildNumber', result.buildNumber);
            core.setOutput('buildId', result.buildId);
            core.setOutput('gitReferenceId', result.gitReferenceId);
          } catch (error) {
            core.setFailed(error.message);
            throw error;
          }
